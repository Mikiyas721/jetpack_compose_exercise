**********************
***** Design *********
**********************
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Lists(URL: https://developer.android.com/jetpack/compose/lists)
- Column can be scrollable by using the "verticalScroll()" modifier

#Lazy composables
- Use "LazyColumn" and "LazyRow" for large number of items or list of unknown lenght.
- These Composables lay out items that are currently visible in the view port.
- These composables provide "LazyListScope" block instead of "content" block.

#LazyListScope DSL 
- The DSL of "LazyListScope" provides a number of functions for describing items in the layout.
At the most basic, item() adds a single "item", and "items(Int)" adds multiple items.
- A variant of items(), "itemsIndexed()" which provides the index of the item at current iteration.

#Content padding
- The lazy components allow you to pass some PaddingValues to the "contentPadding" parameter.
- Note that this padding is applied to the content, not the composable. 

#Content spacing
- "Arragnement.spaceBy()" can be used to apply space to content, by passing it to "verticalArrangment" or "horizontalArrangment" attributes

#Item animationshttps://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyVerticalGrid(androidx.compose.foundation.lazy.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Function1)
- The Lazy layouts do not yet animate its transition automatically.

#Sticky Headers(experimental)
- "stickyHeader()" function to provide the header content.

#Grids(experimental)
- "LazyVerticalGrid()" composable for displating items in grid. "cells" parameter controls how cells are formed.
- "cells" takes parameters like "GridCells.Adaptive()" or "GridCells.Fixed()" 

#Reacting to scroll position
- The lazy components support this use-case by hoisting the "LazyListState".
- The "LazyListState" provides the "firstVisibleItemIndex" and "firstVisibleItemScrollOffset" properties
- "LazyListState" also provides information about all of the items currently being displayed and their bounds on screen, via the "layoutInfo" property. 

#Controlling the scroll position
- "LazyListState" supports this via the "scrollToItem()" function, which ‘immediately’ snaps the scroll position, and "animateScrollToItem()" 
- Both "scrollToItem()" and "animateScrollToItem()" are suspending functions, which means that we need to invoke them in a "coroutine".

#Large data-sets (paging)
- Compose supports Paging 3.0 and later.
- To display a list of paged content, we can use the "collectAsLazyPagingItems()" extension function, 
and then pass in the returned "LazyPagingItems" to "items()" in our LazyColumn. 
- You can display placeholders while data loads by checking if the item is null
- If you use a RemoteMediator to fetch data from a "network service", make sure to provide "realistically sized placeholder" items.

#Item keys
- Provide a stable and unique key for each item.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Text in Compose(URL: https://developer.android.com/jetpack/compose/text)
- "BasicText" and "BasicTextField" | "Text" and "TextField"

#Display text from resource
- "stringResource(R.string.xyz)"

#Styling text
- parameters
	- "color"
	- "fontSize"
	- "fontStyle"
	- "fontWeight"
    - "fontFamily"
	
#Working with fonts
- "serif", "sans-serif", "monospace" and "cursive" are included by default.
- Add .ttf file into res/font directory for custom fonts.
	
#Text alignments
- "textAlign"
- "TextAlign.start" and "TextAlign.end"   -> alphabet specific implementation
- "TextAlign.left" and "TextAlign.right"  -> same result for all alphabets

#Multiple styles in a text
- To set different styles within the same Text composable, you have to use an "AnnotatedString",
a string that can be annotated with styles of arbitrary annotations:
	- Text
	- List of SpanStyleRange
	- List of ParagraphStyleRange
- "TextStyle" is for use in the Text composable , whereas "SpanStyle" and "ParagraphStyle" is for use in AnnotatedString.
- Use "buildAnnotatedString()" function to create AnnotatedString" and "withStyle" to add Style.
- "maxLines", "overflow"

#User interactions
#Selecting text
- By default, composables aren’t selectable, which means by default users can't select and copy text from your app.
- To enable text selection, you need to wrap your text elements with a "SelectionContainer" composable.
- To disable part of a selectable text, you need to wrap the unselectable part with a "DisableSelection" composable.

#Getting the position of a click on text
- To listen for clicks on Text, you can add the "clickable modifier". 
- However, if you’re looking to get the position of a click within a Text composable, you need to use a "ClickableText" instead.

#Click with annotation
- "pushStringAnnotations()" and add tag and annotation parameters as string 'URL' and the url respectively.
Add "pop()" to stop annotation.

#Entering and modifying text
- "TextField" or "OutlinedTextField" at high level and "BasicTextField" at low level.

#Styling TextField
- Some basic parameters:
	- "singleLine"
    - "maxLines"
    - "textStyle"
	
#Keyboard options
- Some basic parameters:
	- "capitalization"
    - "autoCorrect"
    - "keyboardType"
    - "imeAction"

#Formatting
- Basic Visual transformations like replace with "*" and "-" every 4 digits for a credit card number

#Cleaning input
- To control the cursor position while cleaning text, use the "TextFieldValue" overload of TextField instead of passing a regular String.
This overload allows you to change the "cursor position" as part of the state.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Graphics in Compose(URL: https://developer.android.com/jetpack/compose/graphics)
#Canvas
- The Canvas automatically exposes a DrawScope.
- In the Canvas content lambda, there are simple drawing functions:
	- drawLine
	- drawRect
	- drawCircle
	- rotate
	- withTransform
- Use "withTransform" to apply multiple transformations, instead of nesting calls to individual transformations.
- "withTransform" takes a lambda that takes the different transformation functions.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Gestures(URL: https://developer.android.com/jetpack/compose/gestures) 
#Tapping and Pressing
- "clickable" modifier allows click detection on the Composable it is applied to.
- When more flexibility is required, use "pointerInput" modifier.
- This modifier has a functions like "detectDragGesture", "detectTapGesture".
- "detectTapGesture" has the following functions in its scope:
	- onPress
	- onDoubleTap
	- onLongPress
	- onTap

#Scrolling
- The "verticalScroll" and "horizontalScroll" modifiers provide the simplest way to allow the user to scroll an element when the bounds of 
its contents are larger than its maximum size constraints.
- "rememberScrollState()" can be used for default parameters. It returns "ScrollState" object.

#Scrollable modifier
- Detects scroll gesture but does not offset its content.
- "ScrollableController" is required for this modifier to work properly.

#Nested Scrolling
- Compose support nested scrolling, in which multiple elements react to a single scroll gesture.

#Automatic nested scrolling
- Gestures that initiate a scrolling action are propagated from children to parents automatically, 
such that when the child can't scroll any further, the gesture is handled by its parent element.
- Automatic nested scrolling is supported and provided out of the box by some of Compose's components and modifiers:
"verticalScroll", "horizontalScroll", "scrollable", "Lazy" APIs and "TextField".

#Using the nestedScroll modifier
- "nestedScroll" modifier can be used to create an advanced coordinated scroll between multiple elements

#Dragging
- The "draggable" modifier is the high-level entry point to drag gestures in a single orientation, 
and reports the drag distance in pixels.
- Just like scrollable modifier, this modifier does not offset its children and it is not opinionated about its children's layout.
- A lower level implementation of the draggable is to use "detectDragGesture()" function of the "pointerInput" modifier.

#Swiping
- The "swipeable" modifier lets you drag elements which, when released, animate towards typically two or more anchor points defined in an orientation.
- "rememberSwipeableState()" has the following functions and more:
	- snapTo
    - animateTo
    - performFling
    - performDrag

#Multitouch: Panning, zooming, rotating
- To detect multitouch gestures used for panning, zooming and rotating, you can use the "transformable" modifier.
- If you need to combine zooming, panning and rotation with other gestures, you can use the "PointerInputScope.detectTransformGestures" detector,
that is "detectTransformGestures()" function with in the "pointerInput" modifier.








